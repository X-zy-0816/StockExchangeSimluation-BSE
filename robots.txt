交易市场有多个交易日 每个交易日有多个交易期 每个交易期开始更新商品的价值 期间可以修改报价

Giveaway: 最基础的交易机器人，当价格满足交易上下限的时候，ask方直接使用bid方的价格进行购买。（靠运气盈利，当ask方的设定价格小于bid方，而却使用）

ZIC: Zero Intelligence Constraintance, 只有最基础的限制， 通过读取level 2 market的出价（要价）数据（同时包含买卖方），得到最高与最低出价（要价）为MaxPrice 与 MinPrice，结合程序设定的Limit Price
设定机器人的价格范围 然后进行交易 （本质上还是随机出价，但是因为参考了LOB的价格 所以比Giveaway有着更高的利润）

Shaver: 通过获取历史交易中最高卖价以及最低买价设置 bid卖方通过对之前最高的卖价加一的方式提高卖价 ask买家通过对之前最低买价减一的方式降低买价 （两者都是为了降低成本）， （最开始的时候没有可以参考的成交价格就按照自己的limit的价格逐渐提高或下降）
通过这样的方式达成交易并且最终达到equbilium pirce

Sniper: steal and deal Shaver的问题如果单次交易期较短，那么+1 -1的方式可能来不及达成交易，于是Sniper在Shaver上进行修改，使其在交易快要结束的时候才会开始shave，并且根据倒计时的时间调整加减的幅度，使其更快达成交易

ZIP: ZI Plus, 一边交易一边分析价格，最终靠近equbilium price或一个较为均衡的价格并保持


https://www.fx361.com/page/2019/1209/6141728.shtml


题目：：：： 1. PRZI **** 在波动较大的市场中的表现更好？



When we want to run an experiment with BSE, we configure the experiment (as we saw in detail in the previous sections) and then call the "market_session" function. This function is responsible for all the functionality of BSE. How it roughly works, is:

It first populates the market with traders (using the "populate_market" function) by instantiating them from their respective classes and gives each a unique id.
Then loops around until the end of the experiment. The time of the market is increased by a timestep on every iteration. One timestep is not one (market) second but is equal to a fraction of a second. The exact fraction is determined by the number of traders (e.g. for a market with 5 sellers and 5 buyers, the timestep is 1/10 of a second).
On every iteration:
A call to the "customer_orders" is made. This function does one of two things. It initially creates limit orders for all traders that will be given to them in the future (remember traders are resupplied with orders based on a schedule with an interval). If it already created the orders, on future calls it checks which of those orders should be issued (based on the current time) to the traders and sends them by calling the "add_order" method of that trader.
A trader is selected at random and the trader's "getorder" method is called thus allowing that trader to trade. What this means, is that the selected trader can issue a new order (which adjusts its current order if the trade has one) or can do nothing if the trader is happy with its current order (or lack of order). (Note: This trader order is different from the one given to the trader by "customer_orders". This one is the order the trader issues to the market while the other is the trader's private value)
If the selected trader issued a new order:
That order is processed by the exchange using the "process_order2" method. This method either returns a "transaction_record" indicating that the order was executed and resulted in a trade or None indicating that the order was not executed (i.e. just added to the LOB). The transaction record contains all information of a trade (time, price, involved parties etc). If the order resulted to a trade, the two traders involved are also notified using their "bookkeep" methods.
After the order is processed, all traders are notified with the new state of the LOB (and the trade if it happened). This allows traders to adjust their strategy given the new state of the LOB.
Finally at the end of the session the function produces the appropriate output files.